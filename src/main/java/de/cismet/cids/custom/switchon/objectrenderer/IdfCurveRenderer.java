/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.switchon.objectrenderer;

import Sirius.navigator.ui.RequestsFullSizeComponent;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import java.awt.EventQueue;

import java.io.StringReader;

import de.cismet.cids.custom.switchon.AbstractCidsBeanRenderer;
import de.cismet.cids.custom.switchon.IDFCurve;
import de.cismet.cids.custom.switchon.IDFCurvePanel;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class IdfCurveRenderer extends AbstractCidsBeanRenderer implements RequestsFullSizeComponent {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(IdfCurveRenderer.class);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkForecast;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblShowDescription;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlIdf;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form IdfCurveRenderer.
     */
    public IdfCurveRenderer() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        pnlIdf = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        chkForecast = new javax.swing.JCheckBox();
        lblDescription = new javax.swing.JLabel();
        lblShowDescription = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        pnlIdf.setOpaque(false);
        pnlIdf.setLayout(new java.awt.BorderLayout());

        lblStatus.setText(NbBundle.getMessage(IdfCurveRenderer.class, "IdfCurveRenderer.lblStatus.text")); // NOI18N
        pnlIdf.add(lblStatus, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnlIdf, gridBagConstraints);

        chkForecast.setText(NbBundle.getMessage(IdfCurveRenderer.class, "IdfCurveRenderer.chkForecast.text")); // NOI18N
        chkForecast.setContentAreaFilled(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.forecast}"),
                chkForecast,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        chkForecast.addItemListener(new java.awt.event.ItemListener() {

                @Override
                public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                    chkForecastItemStateChanged(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(chkForecast, gridBagConstraints);

        lblDescription.setFont(new java.awt.Font("Lucida Grande", 1, 13));                                           // NOI18N
        lblDescription.setText(NbBundle.getMessage(IdfCurveRenderer.class, "IdfCurveRenderer.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDescription, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.description}"),
                lblShowDescription,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue(NbBundle.getMessage(
                IdfCurveRenderer.class,
                "IdfCurveRenderer.lblDescriptionValue.text.nullSourceValue"));       // NOI18N
        binding.setSourceUnreadableValue(NbBundle.getMessage(
                IdfCurveRenderer.class,
                "IdfCurveRenderer.lblDescriptionValue.text.unreadableSourceValue")); // NOI18N
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblShowDescription, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void chkForecastItemStateChanged(final java.awt.event.ItemEvent evt) { //GEN-FIRST:event_chkForecastItemStateChanged
        if (cidsBean != null) {
            final Boolean forecast = (Boolean)cidsBean.getProperty("forecast");
            if (forecast != null) {
                chkForecast.setSelected(forecast.booleanValue());
            } else {
                chkForecast.setSelected(false);
            }
        }
    }                                                                              //GEN-LAST:event_chkForecastItemStateChanged

    @Override
    protected void init() {
        bindingGroup.unbind();
        bindingGroup.bind();

        pnlIdf.removeAll();

        final String json = (String)cidsBean.getProperty("uri");
        final ObjectMapper mapper = new ObjectMapper();
        final IDFCurve curve;
        try {
            curve = mapper.readValue(new StringReader(json), IDFCurve.class);
            final Boolean forecast = (Boolean)cidsBean.getProperty("forecast");
            final Integer year = (Integer)cidsBean.getProperty("year");
            curve.setForecast(forecast);
            curve.setCenterYear(year);
            curve.setSelf(cidsBean);
            pnlIdf.add(new IDFCurvePanel(curve));

            final Runnable r = new Runnable() {

                    @Override
                    public void run() {
                        pnlIdf.removeAll();
                        pnlIdf.add(new IDFCurvePanel(curve));
                        IdfCurveRenderer.this.invalidate();
                        IdfCurveRenderer.this.validate();
                    }
                };

            if (EventQueue.isDispatchThread()) {
                r.run();
            } else {
                EventQueue.invokeLater(r);
            }
        } catch (final Exception ex) {
            final String message = "Cannot inizialize IDFCurveRenderer!"; // NOI18N
            LOG.error(message, ex);
        }
    }
}
