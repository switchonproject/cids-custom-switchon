/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.switchon.gui;

import com.vividsolutions.jts.geom.Geometry;

import edu.umd.cs.piccolo.event.PBasicInputEventHandler;
import edu.umd.cs.piccolo.event.PInputEvent;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;

import de.cismet.cids.custom.switchon.SwitchOnConstants;
import de.cismet.cids.custom.switchon.gui.utils.CismapUtils;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;

import de.cismet.cismap.commons.CrsTransformer;
import de.cismet.cismap.commons.XBoundingBox;
import de.cismet.cismap.commons.features.DefaultStyledFeature;
import de.cismet.cismap.commons.features.StyledFeature;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.gui.layerwidget.ActiveLayerModel;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWMS;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWmsGetMapUrl;

/**
 * DOCUMENT ME!
 *
 * @author   Gilles Baatz
 * @version  $Revision$, $Date$
 */
public class PreviewMapPanel extends javax.swing.JPanel implements CidsBeanStore {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            PreviewMapPanel.class);

    //~ Instance fields --------------------------------------------------------

    private final MappingComponent previewMap;
    private CidsBean cidsBean;

    private final StyledFeature previewGeometry = new DefaultStyledFeature();
    private String geoFieldPropertyKey = "";

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form PreviewMapPanel.
     */
    public PreviewMapPanel() {
        initComponents();
        previewMap = new MappingComponent();
        this.add(previewMap, BorderLayout.CENTER);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setLayout(new java.awt.BorderLayout());
    } // </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * DOCUMENT ME!
     */
    private void initMap() {
        if (cidsBean != null) {
            final Object geoObj = cidsBean.getProperty(geoFieldPropertyKey);
            if (geoObj instanceof Geometry) {
                final Geometry pureGeom = CrsTransformer.transformToGivenCrs((Geometry)geoObj,
                        SwitchOnConstants.getInstance().SRS_SERVICE);

                double buffer;
                if (isSmallGeom(pureGeom)) {
                    final XBoundingBox box = new XBoundingBox(pureGeom);

                    final double diagonalLength = Math.sqrt((box.getWidth() * box.getWidth())
                                    + (box.getHeight() * box.getHeight()));
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("Buffer for map: " + diagonalLength);
                    }
                    buffer = diagonalLength;
                } else {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("SwitchOnConstants.Commons.GeoBUffer: " + SwitchOnConstants.getInstance().GEO_BUFFER);
                    }
                    buffer = SwitchOnConstants.getInstance().GEO_BUFFER;
                }

                final XBoundingBox bufferedBox;
                try {
                    bufferedBox = new XBoundingBox(pureGeom.getEnvelope().buffer(
                                buffer));
                } catch (NullPointerException npe) {
                    LOG.error(
                        "NPE in the constructor of XBoundingBox. This happens if a renderer/editor is started with DevelopmentTools.",
                        npe);
                    return;
                }
                final Runnable mapRunnable = new Runnable() {

                        @Override
                        public void run() {
                            final ActiveLayerModel mappingModel = new ActiveLayerModel();
                            mappingModel.setSrs(SwitchOnConstants.getInstance().SRS_SERVICE);
                            mappingModel.addHome(new XBoundingBox(
                                    bufferedBox.getX1(),
                                    bufferedBox.getY1(),
                                    bufferedBox.getX2(),
                                    bufferedBox.getY2(),
                                    SwitchOnConstants.getInstance().SRS_SERVICE,
                                    true));
                            final SimpleWMS swms = new SimpleWMS(new SimpleWmsGetMapUrl(
                                        SwitchOnConstants.getInstance().MAP_CALL_STRING));
                            swms.setName("Spatial Coverage");

                            previewGeometry.setGeometry(pureGeom);
                            previewGeometry.setFillingPaint(new Color(1, 0, 0, 0.5f));
                            previewGeometry.setLineWidth(3);
                            previewGeometry.setLinePaint(new Color(1, 0, 0, 1f));
                            // add the raster layer to the model
                            mappingModel.addLayer(swms);
                            // set the model
                            previewMap.setMappingModel(mappingModel);
                            // initial positioning of the map
                            final int duration = previewMap.getAnimationDuration();
                            previewMap.setAnimationDuration(0);
                            previewMap.gotoInitialBoundingBox();
                            // interaction mode
                            previewMap.setInteractionMode(MappingComponent.ZOOM);
                            // finally when all configurations are done ...
                            previewMap.unlock();
                            previewMap.addCustomInputListener("MUTE", new PBasicInputEventHandler() {

                                    @Override
                                    public void mouseClicked(final PInputEvent evt) {
                                        if (evt.getClickCount() > 1) {
                                            final CidsBean bean = cidsBean;
                                            CismapUtils.switchToCismapMap();
                                            CismapUtils.addBeanGeomAsFeatureToCismapMap(bean, false);
                                        }
                                    }
                                });
                            previewMap.setInteractionMode("MUTE");
                            previewMap.getFeatureCollection().addFeature(previewGeometry);
                            previewMap.setAnimationDuration(duration);
                        }
                    };
                if (EventQueue.isDispatchThread()) {
                    mapRunnable.run();
                } else {
                    EventQueue.invokeLater(mapRunnable);
                }
            }
        }
    }

    /**
     * Returns true if {@code pureGeom} is in EPSG:4326 and the difference of the X coordinates or of the Y coordinates
     * of its bounding box is below 1.
     *
     * @param   pureGeom  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private boolean isSmallGeom(final Geometry pureGeom) {
        if (isEpsg4326(SwitchOnConstants.getInstance().SRS_SERVICE)) {
            final XBoundingBox bbox = new XBoundingBox(pureGeom);
            final boolean bigX = Math.abs(bbox.getX2() - bbox.getX1()) < 1;
            final boolean bigY = Math.abs(bbox.getY2() - bbox.getY1()) < 1;

            return bigX || bigY;
        } else {
            return false;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param   srsService  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private boolean isEpsg4326(final String srsService) {
        return "EPSG:4326".equals(srsService);
    }

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        this.cidsBean = cidsBean;
        initMap();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public String getGeoFieldPropertyKey() {
        return geoFieldPropertyKey;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  geoFieldPropertyKey  DOCUMENT ME!
     */
    public void setGeoFieldPropertyKey(final String geoFieldPropertyKey) {
        this.geoFieldPropertyKey = geoFieldPropertyKey;
    }
}
