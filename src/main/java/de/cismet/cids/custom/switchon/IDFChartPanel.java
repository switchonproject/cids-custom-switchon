/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.switchon;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleInsets;

import java.awt.BorderLayout;
import java.awt.Color;

import java.util.Iterator;

import javax.swing.BorderFactory;

/**
 * DOCUMENT ME!
 *
 * @author   jlauter
 * @version  $Revision$, $Date$
 */
public class IDFChartPanel extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

// private static final transient Logger LOG = Logger.getLogger(IDFChartPanel.class);

    private final transient IDFCurve idfCurve;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlChart;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form IDFChartPanel.
     *
     * @param  idfCurve  DOCUMENT ME!
     */
    public IDFChartPanel(final IDFCurve idfCurve) {
        this.idfCurve = idfCurve;
        initComponents();
        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        final java.awt.GridBagConstraints gridBagConstraints;

        pnlChart = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        pnlChart.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnlChart, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    private void init() {
        final XYDataset dataset = createDataset(idfCurve);
        final String xAxisTitle = org.openide.util.NbBundle.getMessage(
                IDFChartPanel.class,
                "IDFChartPanel.init().xAxisTitle");
        final String yAxisTitle = org.openide.util.NbBundle.getMessage(
                IDFChartPanel.class,
                "IDFChartPanel.init().yAxisTitle");

        final JFreeChart chart = createChart(dataset, null, xAxisTitle, yAxisTitle);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setMouseZoomable(true, true);
//        chartPanel.setMouseWheelEnabled(true);
        chartPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
        pnlChart.add(chartPanel, BorderLayout.CENTER);
    }

    /**
     * DOCUMENT ME!
     *
     * @param   curve  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private XYDataset createDataset(final IDFCurve curve) {
        final XYSeriesCollection dataset = new XYSeriesCollection();
        for (final int frequency : curve.getFrequencies()) {
            final Iterator iterator = curve.getData().keySet().iterator();
            final StringBuilder seriesTitle = new StringBuilder(String.valueOf(frequency));
            if (frequency <= 1) {
                seriesTitle.append(org.openide.util.NbBundle.getMessage(
                        IDFChartPanel.class,
                        "IDFChartPanel.createDataset(IDFCurve).seriesTitle.oneYear"));
            } else {
                seriesTitle.append(org.openide.util.NbBundle.getMessage(
                        IDFChartPanel.class,
                        "IDFChartPanel.createDataset(IDFCurve).seriesTitle.severalYears"));
            }
            final XYSeries series = new XYSeries(seriesTitle.toString());
            while (iterator.hasNext()) {
                final int key = (Integer)iterator.next();
                final double valueX = (double)key;
                final double valueY = (double)curve.getData().get(key).get(frequency);
                series.add(valueX, valueY);
            }
            dataset.addSeries(series);
        }

        return dataset;
    }

    /**
     * DOCUMENT ME!
     *
     * @param   dataset     DOCUMENT ME!
     * @param   title       DOCUMENT ME!
     * @param   xAxisTitle  DOCUMENT ME!
     * @param   yAxisTitle  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private JFreeChart createChart(final XYDataset dataset,
            final String title,
            final String xAxisTitle,
            final String yAxisTitle) {
        final JFreeChart chart = ChartFactory.createXYLineChart(
                title,                          // chart title
                xAxisTitle,                     // x axis label
                yAxisTitle,                     // y axis label
                dataset,                        // data
                PlotOrientation.VERTICAL,
                true,                           // include legend
                true,                           // tooltips
                false                           // urls
                );

        chart.setBackgroundPaint(Color.white);

        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setDomainGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.white);

        final XYLineAndShapeRenderer chartRenderer = new XYLineAndShapeRenderer();
        for (int i = 0; i < dataset.getSeriesCount(); i++) {
            chartRenderer.setSeriesShapesVisible(i, false);
        }

        plot.setRenderer(chartRenderer);

        final NumberAxis rangeAxis = (NumberAxis)plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        return chart;
    }
}
